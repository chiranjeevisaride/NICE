/*
 * TaskPanel.java
 *
 * Created on __DATE__, __TIME__
 */

package com.nice.cloudservers;

import java.awt.Color;
import java.awt.Component;
import java.util.Iterator;
import java.util.Set;
import java.util.TreeMap;

import javax.swing.JOptionPane;
import javax.swing.JPanel;

import com.nice.bean.Users;

/**
 * 
 * @author __USER__
 */
public class TaskPanel extends javax.swing.JPanel {
	TreeMap<Integer, Users> treeMap;
	PublicCloudOwnerForm publicCloudOwnerForm;

	/** Creates new form TaskPanel */
	public TaskPanel(TreeMap<Integer, Users> treeMap,
			PublicCloudOwnerForm publicCloudOwnerForm) {
		this.treeMap = treeMap;
		this.publicCloudOwnerForm = publicCloudOwnerForm;
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jButton1 = new javax.swing.JButton();
		jButton2 = new javax.swing.JButton();
		jButton3 = new javax.swing.JButton();

		setBackground(new java.awt.Color(204, 204, 255));

		jButton1.setText("FCFS");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		jButton2.setText("Inaccurate Optimal resource");
		jButton2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton2ActionPerformed(evt);
			}
		});

		jButton3.setText("ENHANCED EDF");
		jButton3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton3ActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addGap(80, 80, 80).addGroup(
						layout.createParallelGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								false).addComponent(jButton2,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE).addComponent(jButton1,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE).addComponent(jButton3,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE)).addContainerGap(45,
						Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addGap(67, 67, 67).addComponent(
						jButton1).addGap(42, 42, 42).addComponent(jButton2)
						.addGap(39, 39, 39).addComponent(jButton3)
						.addContainerGap(71, Short.MAX_VALUE)));
	}// </editor-fold>

	// GEN-END:initComponents

	private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
		/*int time = 100;
		int optid = 0;
		TreeMap<Integer, Users> timemap = new TreeMap<Integer, Users>();
		try {
			Set set = treeMap.keySet();
			Iterator iterator = set.iterator();
			while (iterator.hasNext()) {
				int id = (Integer) iterator.next();
				Users users = (Users) treeMap.get(id);
				if (time > users.getDownloadtime())
					time = users.getDownloadtime();
				optid = id;
			}
			Users users = (Users) treeMap.get(optid);
			timemap.put(optid, users);
			Component[] components = publicCloudOwnerForm.jPanel
					.getComponents();
			System.out.println("components.length---" + components.length);
			System.out.println("optid---" + optid);

			for (int i = 0; i < components.length; i++) {
				System.out.println("iiiiiiii-------------" + i);
				if (optid == (i + 1)) {
					components[0].setBackground(Color.WHITE);
					components[i].setBackground(Color.GREEN);
				}
			}
			InaccurateFileDownload inaccurateFileDownload = new InaccurateFileDownload(
					timemap);
			inaccurateFileDownload.setVisible(true);

		} catch (Exception e) {
			JOptionPane.showMessageDialog(jPanel, "Error");

		}
*/
	}

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
		String mintime = JOptionPane.showInputDialog(jPanel,
				"Enter Lower Bound Time");
		// String maxtime =
		// JOptionPane.showInputDialog(jPanel,"Enter Upper Bound Time");
		// if (!maxtime.equals("") && !mintime.equals("")) {
		if (!mintime.equals("")) {
			TreeMap<Integer, Users> timemap = new TreeMap<Integer, Users>();
			try {
				Set set = treeMap.keySet();
				Iterator iterator = set.iterator();
				while (iterator.hasNext()) {
					int id = (Integer) iterator.next();
					Users users = (Users) treeMap.get(id);
					users.setMintime(Integer.parseInt(mintime));
					users.setDifftime(users.getDownloadtime()
							- Integer.parseInt(mintime));
					timemap.put(id, users);
				}

				InaccurateFileDownload inaccurateFileDownload = new InaccurateFileDownload(
						timemap);
				inaccurateFileDownload.setVisible(true);

			} catch (Exception e) {
				JOptionPane.showMessageDialog(jPanel, "time in digits only");

			}

		} else {
			JOptionPane.showMessageDialog(jPanel,
					"Please Enter lower and Upeer Bounds...in Seconds");

		}

	}

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
/*
		//Component[] components = publicCloudOwnerForm.jPanel.getComponents();
		for (int i = 0; i < components.length; i++) {
			components[i].setEnabled(true);
		}*/

	}

	// GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JButton jButton3;
	JPanel jPanel = new JPanel();
	// End of variables declaration//GEN-END:variables

}